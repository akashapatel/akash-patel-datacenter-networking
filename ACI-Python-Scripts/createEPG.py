#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><infraAccPortP annotation="" descr="" dn="uni/infra/accportprof-Heroes_server1" name="Heroes_server1" nameAlias="" ownerKey="" ownerTag="" userdom=":all:"><infraHPortS annotation="" descr="" name="ethernet1_21" nameAlias="" ownerKey="" ownerTag="" type="range" userdom=":all:"><infraRsAccBaseGrp annotation="" fexId="101" tDn="uni/infra/funcprof/accportgrp-Heroes_standard_access" userdom=":all:"/><infraPortBlk annotation="" descr="" fromCard="1" fromPort="21" name="block2" nameAlias="" toCard="1" toPort="21" userdom=":all:"/></infraHPortS></infraAccPortP></imdata>

raise RuntimeError('Please review the auto generated code before ' +
                    'executing the output. Some placeholders will ' +
                    'need to be changed')
'''
# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.infra
import cobra.model.pol
import cobra.model.fv
from cobra.internal.codec.xmlcodec import toXMLStr
import urllib3
import csv

urllib3.disable_warnings()

def read_csv():
    results = []
    with open('CUSTOMER-EPG-Legacy.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        for row in reader:
            results.append(row)
    # remove header
    return results[1:] 
    
# main
def main(host, user, password):

    # log into an APIC and create a directory object
    ls = cobra.mit.session.LoginSession('https://' + host, user, password)
    md = cobra.mit.access.MoDirectory(ls)
    md.login()

    # the top level object on which operations will be made
    polUni = cobra.model.pol.Uni('')
    fvTenant = cobra.model.fv.Tenant(polUni, 'Tower-Health')

    
    resultList = read_csv()
    
     # Create infra access port profile by the number of rows
    for lst in resultList: 

        fvAp = cobra.model.fv.Ap(fvTenant, lst[0])
        fvAEPg = cobra.model.fv.AEPg(fvAp, annotation='', descr='', exceptionTag='', floodOnEncap='disabled',fwdCtrl='', hasMcastSource='no', isAttrBasedEPg='no', matchT='AtleastOne', name=lst[1], nameAlias='', pcEnfPref='unenforced', prefGrMemb='exclude', prio='unspecified', shutdown='no', userdom=':all:')
        fvRsProv = cobra.model.fv.RsProv(fvAEPg, annotation='', intent='install', matchT='AtleastOne', prio='unspecified', tnVzBrCPName='permit-Any', userdom=':all:')
        fvRsDomAtt = cobra.model.fv.RsDomAtt(fvAEPg, annotation='', bindingType='none', classPref='encap', customEpgName='', delimiter='', encap='unknown', encapMode='auto',
                                             epgCos='Cos0', epgCosPref='disabled', instrImedcy='lazy', lagPolicyName='', netflowDir='both', netflowPref='disabled', numPorts='0',
                                             portAllocation='none', primaryEncap='unknown', primaryEncapInner='unknown', resImedcy='lazy', secondaryEncapInner='unknown', switchingMode='native',
                                             tDn='uni/phys-' + lst[3], untagged='no', userdom=':all:', vnetOnly='no')
        fvRsCons = cobra.model.fv.RsCons(fvAEPg, annotation='', intent='install', prio='unspecified', tnVzBrCPName='permit-Any', userdom=':all:')
        fvRsCustQosPol = cobra.model.fv.RsCustQosPol(fvAEPg, annotation='', tnQosCustomPolName='', userdom='all')
        fvRsBd = cobra.model.fv.RsBd(fvAEPg, annotation='', tnFvBDName=lst[2], userdom='all')

        # commit the generated code to APIC
        #print(toXMLStr(infraInfra))
        c = cobra.mit.request.ConfigRequest()
        c.addMo(fvTenant)
        md.commit(c)

if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser("Create Leaf Interface Profile")
    parser.add_argument('-d', '--host', help='APIC host name or IP', required=True)
    parser.add_argument('-u', '--user', help='user name', required=True)
    parser.add_argument('-p', '--password', help='user password', required=True)
    args = parser.parse_args()

    main(args.host, args.user, args.password)

